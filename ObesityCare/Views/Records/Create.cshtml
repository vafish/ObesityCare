@model ObesityCare.Models.Record

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}



@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="hero hero-4" style="background-image: url('../../images/records.jpg');">
        <div class="container">
            <div class="row align-items-center">
                <div class="col-lg-10 mx-auto" style="background-color:white; opacity:0.75;">
                    <div class="intro col-lg-8 mx-auto text-dark">

                        <h1 class="heading mb-2  text-dark" data-aos="fade-up" data-aos-delay="0" style="padding-top:10px"> Add a  New Record</h1>
                        <div data-aos="fade-up" data-aos-delay="100">
                            <p class="block-testimonial">
                                Record details
                            </p>


                            <div class="row block-testimonial">

                                @Html.ValidationSummary(true, "", new { @class = "text-danger" })



                                @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "col-4 mb-3" })
                                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "col-4 mb-3 autocomplete", @id = "myInput" } })

                                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })



                                @*@Html.LabelFor(model => model.Location, htmlAttributes: new { @class = "col-4 mb-3" })

                                    @Html.EditorFor(model => model.Location, new { htmlAttributes = new { @class = "col-4 mb-3" } })
                                    @Html.ValidationMessageFor(model => model.Location, "", new { @class = "text-danger" })*@




                                @Html.LabelFor(model => model.Duration, htmlAttributes: new { @class = "col-4 mb-3" })

                                @Html.EditorFor(model => model.Duration, new { htmlAttributes = new { @class = "col-4 mb-3", placeholder = "Enter time in minutes", @id = "myInput2" } })
                                @Html.ValidationMessageFor(model => model.Duration, "", new { @class = "text-danger" })




                                @Html.LabelFor(model => model.Star, htmlAttributes: new { @class = "col-4 mb-3" })

                                @Html.EditorFor(model => model.Star, new { htmlAttributes = new { @class = "col-4 mb-3", placeholder = "1 star = 100 calories burned", @id = "myResult" } })
                                @Html.ValidationMessageFor(model => model.Star, "", new { @class = "text-danger" })



                                <div class="col-3 mb-3 btn btn-outline-primary">@Html.ActionLink("Back to List", "Index")</div>

                                <div class="col-4 mb-3 float-right" style="padding-left:50%">

                                    <input type="submit" class="btn btn-outline-primary" id="claim" value="Add" />

                                </div>

                            </div>



                        </div>

                    </div>

                </div>
            </div>
        </div>
    </div>

}

<style>
    a {
        color: #367f7c;
        text-decoration: none;
    }

        a:hover {
            color: black;
        }

    #claim {
        color: #367f7c;
        text-decoration: none;
    }

        #claim:hover {
            color: black;
        }
</style>

<script src="~/Scripts/jquery-3.6.0.js"></script>

<script type="text/javascript">
    function autocomplete(inp, arr) {
        /*the autocomplete function takes two arguments,
        the text field element and an array of possible autocompleted values:*/
        var currentFocus;
        /*execute a function when someone writes in the text field:*/
        inp.addEventListener("input", function (e) {
            var a, b, i, val = this.value;
            /*close any already open lists of autocompleted values*/
            closeAllLists();
            if (!val) { return false; }
            currentFocus = -1;
            /*create a DIV element that will contain the items (values):*/
            a = document.createElement("DIV");
            a.setAttribute("id", this.id + "autocomplete-list");
            a.setAttribute("class", "autocomplete-items");
            /*append the DIV element as a child of the autocomplete container:*/
            this.parentNode.appendChild(a);
            /*for each item in the array...*/
            for (i = 0; i < arr.length; i++) {
                /*check if the item starts with the same letters as the text field value:*/
                if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {
                    /*create a DIV element for each matching element:*/
                    b = document.createElement("DIV");
                    /*make the matching letters bold:*/
                    b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
                    b.innerHTML += arr[i].substr(val.length);
                    /*insert a input field that will hold the current array item's value:*/
                    b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
                    /*execute a function when someone clicks on the item value (DIV element):*/
                    b.addEventListener("click", function (e) {
                        /*insert the value for the autocomplete text field:*/
                        inp.value = this.getElementsByTagName("input")[0].value;
                        /*close the list of autocompleted values,
                        (or any other open lists of autocompleted values:*/
                        closeAllLists();
                    });
                    a.appendChild(b);
                }
            }
        });
        /*execute a function presses a key on the keyboard:*/
        inp.addEventListener("keydown", function (e) {
            var x = document.getElementById(this.id + "autocomplete-list");
            if (x) x = x.getElementsByTagName("div");
            if (e.keyCode == 40) {
                /*If the arrow DOWN key is pressed,
                increase the currentFocus variable:*/
                currentFocus++;
                /*and and make the current item more visible:*/
                addActive(x);
            } else if (e.keyCode == 38) { //up
                /*If the arrow UP key is pressed,
                decrease the currentFocus variable:*/
                currentFocus--;
                /*and and make the current item more visible:*/
                addActive(x);
            } else if (e.keyCode == 13) {
                /*If the ENTER key is pressed, prevent the form from being submitted,*/
                e.preventDefault();
                if (currentFocus > -1) {
                    /*and simulate a click on the "active" item:*/
                    if (x) x[currentFocus].click();
                }
            }
        });
        function addActive(x) {
            /*a function to classify an item as "active":*/
            if (!x) return false;
            /*start by removing the "active" class on all items:*/
            removeActive(x);
            if (currentFocus >= x.length) currentFocus = 0;
            if (currentFocus < 0) currentFocus = (x.length - 1);
            /*add class "autocomplete-active":*/
            x[currentFocus].classList.add("autocomplete-active");
        }
        function removeActive(x) {
            /*a function to remove the "active" class from all autocomplete items:*/
            for (var i = 0; i < x.length; i++) {
                x[i].classList.remove("autocomplete-active");
            }
        }
        function closeAllLists(elmnt) {
            /*close all autocomplete lists in the document,
            except the one passed as an argument:*/
            var x = document.getElementsByClassName("autocomplete-items");
            for (var i = 0; i < x.length; i++) {
                if (elmnt != x[i] && elmnt != inp) {
                    x[i].parentNode.removeChild(x[i]);
                }
            }
        }
        /*execute a function when someone clicks in the document:*/
        document.addEventListener("click", function (e) {
            closeAllLists(e.target);
        });


    }

    /*An array containing all the country names in the world:*/
    var games = ["Blind Mans Buff", "Dodgeball", "Double Dutch", "Duck, Duck, Goose", "Four Square", "Hide & Seek", "Hopscotch", "Hula Hoop", "Kickball", "Musical Chairs", "Potato Drop",
        "Red Rover", "Ring a Ring o' Roses", "Skipping Rope", "Tag", "Twister", "What is the time, Mr.Wolf ?", "Handball", "Rugby", "Football", "Running", "Hiking", "Roller Skating", "Soccer",
        "Tennis", "Aerobics", "Basketball", "Paddleball", "Skateboarding", "Cycling", "Swimming", "Table Tennis", "Water Aerobics", "Trampoline", "Walking", "Bowling", "Surfing", "Volleyball"];
    /*initiate the autocomplete function on the "myInput" element, and pass along the countries array as possible autocomplete values:*/
    autocomplete(document.getElementById("myInput"), games);
    //var act = document.getElementById('myInput');
    //var duration = document.getElementById('myInput2');
    //var star = document.getElementById('myResult');
    //var res = document.getElementById('res');
    //act.onkeyup = autoCal();
    //duration.onkeyup = autoCal();
    //function autoCal() {
    //    res.value = act.value;


    //}

    $(document).ready(function () {
        $("#myInput2").on('input', function () {
            if ($("#myInput").val() == "Blind Mans Buff" || $("#myInput").val() == "Blind Man's Buff") {
                $('#myResult').val(Math.round($(this).val() * 228 / 3000));
            }
            if ($("#myInput").val() == "Dodgeball") {
                $('#myResult').val(Math.round($(this).val() * 144 / 3000));
            }
            if ($("#myInput").val() == "Double Dutch") {
                $('#myResult').val(Math.round($(this).val() * 480 / 3000));
            }
            if ($("#myInput").val() == "Duck, Duck, Goose") {
                $('#myResult').val(Math.round($(this).val() * 150 / 3000));
            }
            if ($("#myInput").val() == "Four Square") {
                $('#myResult').val(Math.round($(this).val() * 170 / 3000));
            }
            if ($("#myInput").val() == "Hide & Seek") {
                $('#myResult').val(Math.round($(this).val() * 100 / 3000));
            }
            if ($("#myInput").val() == "Hopscotch") {
                $('#myResult').val(Math.round($(this).val() * 196 / 3000));
            }
            if ($("#myInput").val() == "Hula Hoop") {
                $('#myResult').val(Math.round($(this).val() * 358 / 3000));
            }
            if ($("#myInput").val() == "Kickball") {
                $('#myResult').val(Math.round($(this).val() * 200 / 3000));
            }
            if ($("#myInput").val() == "Musical Chairs") {
                $('#myResult').val(Math.round($(this).val() * 144 / 3000));
            }
            if ($("#myInput").val() == "Potato Drop") {
                $('#myResult').val(Math.round($(this).val() * 300 / 3000));
            }
            if ($("#myInput").val() == "Red Rover") {
                $('#myResult').val(Math.round($(this).val() * 200 / 3000));
            }
            if ($("#myInput").val() == "Ring a Ring o' Roses") {
                $('#myResult').val(Math.round($(this).val() * 160 / 3000));
            }
            if ($("#myInput").val() == "Skipping Rope") {
                $('#myResult').val(Math.round($(this).val() * 125 / 1000));
            }
            if ($("#myInput").val() == "Tag") {
                $('#myResult').val(Math.round($(this).val() * 270 / 3000));
            }
            if ($("#myInput").val() == "Twister") {
                $('#myResult').val(Math.round($(this).val() * 120 / 3000));
            }
            if ($("#myInput").val() == "What is the time, Mr.Wolf ?") {
                $('#myResult').val(Math.round($(this).val() * 150 / 3000));
            }
            if ($("#myInput").val() == "Handball") {
                $('#myResult').val(Math.round($(this).val() * 243 / 3000));
            }
            if ($("#myInput").val() == "Rugby") {
                $('#myResult').val(Math.round($(this).val() * 204 / 3000));
            }
            if ($("#myInput").val() == "Football") {
                $('#myResult').val(Math.round($(this).val() * 162 / 3000));
            }
            if ($("#myInput").val() == "Running") {
                $('#myResult').val(Math.round($(this).val() * 156 / 3000));
            }
            if ($("#myInput").val() == "Hiking") {
                $('#myResult').val(Math.round($(this).val() * 144 / 3000));
            }
            if ($("#myInput").val() == "Roller Skating") {
                $('#myResult').val(Math.round($(this).val() * 135 / 3000));
            }
            if ($("#myInput").val() == "Soccer") {
                $('#myResult').val(Math.round($(this).val() * 140 / 3000));
            }
            if ($("#myInput").val() == "Tennis") {
                $('#myResult').val(Math.round($(this).val() * 142 / 3000));
            }
            if ($("#myInput").val() == "Aerobics") {
                $('#myResult').val(Math.round($(this).val() * 132 / 3000));
            }
            if ($("#myInput").val() == "Basketball") {
                $('#myResult').val(Math.round($(this).val() * 123 / 3000));
            }
            if ($("#myInput").val() == "Paddleball") {
                $('#myResult').val(Math.round($(this).val() * 122 / 3000));
            }
            if ($("#myInput").val() == "Skateboarding") {
                $('#myResult').val(Math.round($(this).val() * 102 / 3000));
            }
            if ($("#myInput").val() == "Cycling") {
                $('#myResult').val(Math.round($(this).val() * 102 / 3000));
            }
            if ($("#myInput").val() == "Swimming") {
                $('#myResult').val(Math.round($(this).val() * 180 / 3000));
            }
            if ($("#myInput").val() == "Table Tennis") {
                $('#myResult').val(Math.round($(this).val() * 82 / 3000));
            }
            if ($("#myInput").val() == "Water Aerobics") {
                $('#myResult').val(Math.round($(this).val() * 81 / 3000));
            }
            if ($("#myInput").val() == "Trampoline") {
                $('#myResult').val(Math.round($(this).val() * 72 / 3000));
            }
            if ($("#myInput").val() == "Walking") {
                $('#myResult').val(Math.round($(this).val() * 62 / 3000));
            }
            if ($("#myInput").val() == "Bowling") {
                $('#myResult').val(Math.round($(this).val() * 60 / 3000));
            }
            if ($("#myInput").val() == "Surfing") {
                $('#myResult').val(Math.round($(this).val() * 65 / 3000));
            }
            if ($("#myInput").val() == "Volleyball") {
                $('#myResult').val(Math.round($(this).val() * 160 / 3000));
            }



        });
    });
</script>


<style>

    /*the container must be positioned relative:*/
    .autocomplete {
        position: relative;
        display: inline-block;
    }


    .autocomplete-items {
        position: absolute;
        border-bottom: none;
        border-top: none;
        z-index: 99;
        /*position the autocomplete items to be the same width as the container:*/
        top: inherit;
        left: 0;
        right: 0;
        width: inherit;
        margin-top: 25px;
        margin-left: 31%;
        margin-right: 31%;
    }

        .autocomplete-items div {
            padding: 5px;
            cursor: pointer;
            background-color: #fff;
            border-bottom: 1px solid #d4d4d4;
        }

            /*when hovering an item:*/
            .autocomplete-items div:hover {
                background-color: #e9e9e9;
            }

    /*when navigating through the items using the arrow keys:*/
    .autocomplete-active {
        background-color: DodgerBlue !important;
        color: #ffffff;
    }
</style>

